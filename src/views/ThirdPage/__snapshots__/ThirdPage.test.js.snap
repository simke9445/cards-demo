// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectedThirdPage renders without crashing 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    locale="en"
    messages={
      Object {
        "card.footer": "Why do you need this info?",
        "card.header": "Sign up",
        "page.title": "Moment",
        "page1.content": "Please tell us your name...",
        "page1.placeholder.firstName": "First Name",
        "page1.placeholder.lastName": "Last Name",
        "page1.select.default": "Choose your title",
        "page1.select.option1": "Mr",
        "page1.select.option2": "Mrs",
        "page1.select.option3": "Miss",
        "page1.select.option4": "Ms",
        "page1.select.option5": "Doctor",
        "page1.tooltip": "We need this information to proceed. Required fields are displayed in red.",
        "page2.button.female": "Female",
        "page2.button.male": "Male",
        "page2.content": "Please tell us your gender...",
        "page3.button.no": "No",
        "page3.button.yes": "Yes",
        "page3.content": "Are you a UK resident?",
        "page3.tooltip": "We are doing approximations based on your location.",
      }
    }
  >
    <Connect(ReduxForm)>
      <ReduxForm
        onPrevious={[Function]}
        onSubmit={[Function]}
        pageIndex={3}
      >
        <Connect(Form(ThirdPage))
          destroyOnUnmount={false}
          enableReinitialize={false}
          forceUnregisterOnUnmount={true}
          form="cards"
          getFormState={[Function]}
          initialValues={undefined}
          keepDirtyOnReinitialize={false}
          onPrevious={[Function]}
          onSubmit={[Function]}
          pageIndex={3}
          persistentSubmitErrors={false}
          pure={true}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          validate={[Function]}
        >
          <Form(ThirdPage)
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            arrayInsert={[Function]}
            arrayMove={[Function]}
            arrayPop={[Function]}
            arrayPush={[Function]}
            arrayRemove={[Function]}
            arrayRemoveAll={[Function]}
            arrayShift={[Function]}
            arraySplice={[Function]}
            arraySwap={[Function]}
            arrayUnshift={[Function]}
            asyncErrors={undefined}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            destroy={[Function]}
            destroyOnUnmount={false}
            dirty={false}
            dispatch={[Function]}
            enableReinitialize={false}
            error={undefined}
            focus={[Function]}
            forceUnregisterOnUnmount={true}
            form="cards"
            getFormState={[Function]}
            initialValues={undefined}
            initialize={[Function]}
            initialized={false}
            invalid={false}
            keepDirtyOnReinitialize={false}
            onPrevious={[Function]}
            onSubmit={[Function]}
            pageIndex={3}
            persistentSubmitErrors={false}
            pristine={true}
            pure={true}
            registerField={[Function]}
            registeredFields={undefined}
            reset={[Function]}
            setSubmitFailed={[Function]}
            setSubmitSucceeded={[Function]}
            shouldAsyncValidate={[Function]}
            shouldError={[Function]}
            shouldValidate={[Function]}
            shouldWarn={[Function]}
            startAsyncValidation={[Function]}
            startSubmit={[Function]}
            stopAsyncValidation={[Function]}
            stopSubmit={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            syncErrors={Object {}}
            syncWarnings={Object {}}
            touch={[Function]}
            touchOnBlur={true}
            touchOnChange={false}
            triggerSubmit={undefined}
            unregisterField={[Function]}
            untouch={[Function]}
            updateSyncErrors={[Function]}
            updateSyncWarnings={[Function]}
            valid={true}
            validExceptSubmit={true}
            validate={[Function]}
            values={Object {}}
            warning={undefined}
          >
            <ThirdPage
              anyTouched={false}
              array={
                Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeAll": [Function],
                  "shift": [Function],
                  "splice": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                }
              }
              asyncValidate={[Function]}
              asyncValidating={false}
              autofill={[Function]}
              blur={[Function]}
              change={[Function]}
              clearAsyncError={[Function]}
              clearSubmit={[Function]}
              clearSubmitErrors={[Function]}
              destroy={[Function]}
              dirty={false}
              dispatch={[Function]}
              error={undefined}
              form="cards"
              handleSubmit={[Function]}
              initialValues={undefined}
              initialize={[Function]}
              initialized={false}
              invalid={false}
              onPrevious={[Function]}
              onSubmit={[Function]}
              pageIndex={3}
              pristine={true}
              pure={true}
              reset={[Function]}
              submit={[Function]}
              submitFailed={false}
              submitSucceeded={false}
              submitting={false}
              touch={[Function]}
              triggerSubmit={undefined}
              untouch={[Function]}
              valid={true}
              validate={[Function]}
              warning={undefined}
            >
              <ThirdPage
                anyTouched={false}
                array={
                  Object {
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeAll": [Function],
                    "shift": [Function],
                    "splice": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                  }
                }
                asyncValidate={[Function]}
                asyncValidating={false}
                autofill={[Function]}
                blur={[Function]}
                change={[Function]}
                clearAsyncError={[Function]}
                clearSubmit={[Function]}
                clearSubmitErrors={[Function]}
                destroy={[Function]}
                dirty={false}
                dispatch={[Function]}
                error={undefined}
                form="cards"
                handleSubmit={[Function]}
                initialValues={undefined}
                initialize={[Function]}
                initialized={false}
                intl={
                  Object {
                    "formatMessage": [Function],
                  }
                }
                invalid={false}
                onPrevious={[Function]}
                onSubmit={[Function]}
                pageIndex={3}
                pristine={true}
                pure={true}
                reset={[Function]}
                submit={[Function]}
                submitFailed={false}
                submitSucceeded={false}
                submitting={false}
                touch={[Function]}
                triggerSubmit={undefined}
                untouch={[Function]}
                valid={true}
                validate={[Function]}
                warning={undefined}
              >
                <Page
                  hasNext={true}
                  hasPrevious={true}
                  onNext={[Function]}
                  onPrevious={[Function]}
                  pageIndex={3}
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "backgroundColor": "#F5F5F5",
                        "display": "flex",
                        "flexDirection": "column",
                        "height": "100%",
                        "justifyContent": "flex-start",
                      }
                    }
                  >
                    <div
                      className="pt-callout"
                      style={
                        Object {
                          "alignItems": "center",
                          "backgroundColor": "white",
                          "boxShadow": "rgba(0, 0, 0, 0.15) 0px 3px 14px",
                          "display": "flex",
                          "height": "7.5%",
                          "justifyContent": "space-between",
                          "width": "90%",
                        }
                      }
                    >
                      <h3
                        style={
                          Object {
                            "color": "#B2B6B9",
                            "paddingLeft": "14px",
                            "textAlign": "left",
                            "width": "20%",
                          }
                        }
                      >
                        <FormattedMessage
                          id="page.title"
                          values={Object {}}
                        >
                          <span>
                            Moment
                          </span>
                        </FormattedMessage>
                      </h3>
                      <div
                        style={
                          Object {
                            "width": "60%",
                          }
                        }
                      >
                        <div
                          className="pt-progress-bar pt-no-stripes"
                        >
                          <div
                            className="pt-progress-meter"
                            style={
                              Object {
                                "backgroundColor": "#A06FEF",
                                "display": "flex",
                                "width": "75%",
                              }
                            }
                          />
                        </div>
                      </div>
                      <div
                        style={
                          Object {
                            "visibility": "hidden",
                            "width": "20%",
                          }
                        }
                      />
                    </div>
                    <div
                      style={
                        Object {
                          "alignItems": "center",
                          "display": "flex",
                          "flex": "1",
                          "justifyContent": "space-between",
                          "width": "100%",
                        }
                      }
                    >
                      <div
                        className="half-circle"
                        onClick={[Function]}
                        style={
                          Object {
                            "alignItems": "center",
                            "cursor": "pointer",
                            "display": "flex",
                            "justifyContent": "center",
                          }
                        }
                      >
                        <Blueprint.Icon
                          iconName="chevron-left"
                          style={
                            Object {
                              "color": "white",
                              "fontSize": "3em",
                              "transform": "translate(-10px)",
                            }
                          }
                        >
                          <span
                            className="pt-icon-standard pt-icon-chevron-left"
                            style={
                              Object {
                                "color": "white",
                                "fontSize": "3em",
                                "transform": "translate(-10px)",
                              }
                            }
                          />
                        </Blueprint.Icon>
                      </div>
                      <Card
                        hasTooltip={true}
                        tooltipMessage="page3.tooltip"
                      >
                        <div
                          style={
                            Object {
                              "alignItems": "center",
                              "display": "flex",
                              "flex": "1",
                              "flexDirection": "column",
                              "height": "100%",
                              "justifyContent": "center",
                              "width": "100%",
                            }
                          }
                        >
                          <div
                            className="pt-card pt-elevation-2"
                            style={
                              Object {
                                "boxShadow": "rgba(0, 0, 0, 0.14) 0px 0em 2em 2px, rgb(242, 242, 242) 0px 0.75em 0px -0.25em, rgba(0, 0, 0, 0.09) 0px 1.5em 0.1875em -0.5em, rgb(229, 229, 229) 0px 1em 0px -0.5em, rgba(0, 0, 0, 0.1) 0px 1em 0.1875em -0.5em",
                                "display": "flex",
                                "flexDirection": "column",
                                "height": "500px",
                                "padding": "0",
                                "width": "340px",
                                "wordWrap": "break-word",
                              }
                            }
                          >
                            <div
                              className="pt-callout"
                              style={
                                Object {
                                  "backgroundColor": "#A06FEF",
                                }
                              }
                            >
                              <h5
                                style={
                                  Object {
                                    "color": "white",
                                  }
                                }
                              >
                                <FormattedMessage
                                  id="card.header"
                                  values={Object {}}
                                >
                                  <span>
                                    Sign up
                                  </span>
                                </FormattedMessage>
                              </h5>
                            </div>
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "flex": 1,
                                  "flexDirection": "column",
                                  "justifyContent": "center",
                                  "padding": "24px",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "alignItems": "center",
                                    "display": "flex",
                                    "flexDirection": "column",
                                    "height": "30%",
                                    "justifyContent": "space-between",
                                  }
                                }
                              >
                                <Blueprint.Icon
                                  iconName="home"
                                  style={
                                    Object {
                                      "color": "#A06FEF",
                                      "fontSize": "4em",
                                    }
                                  }
                                >
                                  <span
                                    className="pt-icon-standard pt-icon-home"
                                    style={
                                      Object {
                                        "color": "#A06FEF",
                                        "fontSize": "4em",
                                      }
                                    }
                                  />
                                </Blueprint.Icon>
                                <h4>
                                  <FormattedMessage
                                    id="page3.content"
                                    values={Object {}}
                                  >
                                    <span>
                                      Are you a UK resident?
                                    </span>
                                  </FormattedMessage>
                                </h4>
                              </div>
                              <div
                                className="pt-control-group pt-horizontal"
                                style={
                                  Object {
                                    "alignItems": "center",
                                    "display": "flex",
                                    "justifyContent": "center",
                                  }
                                }
                              >
                                <Field
                                  component={[Function]}
                                  name="ukResident"
                                >
                                  <Connect(ConnectedField)
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": false,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": true,
                                        "form": "cards",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onPrevious": [Function],
                                        "onSubmit": [Function],
                                        "pageIndex": 3,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "validate": [Function],
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    component={[Function]}
                                    name="ukResident"
                                    normalize={[Function]}
                                  >
                                    <ConnectedField
                                      _reduxForm={
                                        Object {
                                          "anyTouched": false,
                                          "array": Object {
                                            "insert": [Function],
                                            "move": [Function],
                                            "pop": [Function],
                                            "push": [Function],
                                            "remove": [Function],
                                            "removeAll": [Function],
                                            "shift": [Function],
                                            "splice": [Function],
                                            "swap": [Function],
                                            "unshift": [Function],
                                          },
                                          "arrayInsert": [Function],
                                          "arrayMove": [Function],
                                          "arrayPop": [Function],
                                          "arrayPush": [Function],
                                          "arrayRemove": [Function],
                                          "arrayRemoveAll": [Function],
                                          "arrayShift": [Function],
                                          "arraySplice": [Function],
                                          "arraySwap": [Function],
                                          "arrayUnshift": [Function],
                                          "asyncErrors": undefined,
                                          "asyncValidate": [Function],
                                          "asyncValidating": false,
                                          "autofill": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "clearAsyncError": [Function],
                                          "clearSubmit": [Function],
                                          "clearSubmitErrors": [Function],
                                          "destroy": [Function],
                                          "destroyOnUnmount": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "enableReinitialize": false,
                                          "error": undefined,
                                          "focus": [Function],
                                          "forceUnregisterOnUnmount": true,
                                          "form": "cards",
                                          "getFormState": [Function],
                                          "getValues": [Function],
                                          "initialValues": undefined,
                                          "initialize": [Function],
                                          "initialized": false,
                                          "invalid": false,
                                          "keepDirtyOnReinitialize": false,
                                          "onPrevious": [Function],
                                          "onSubmit": [Function],
                                          "pageIndex": 3,
                                          "persistentSubmitErrors": false,
                                          "pristine": true,
                                          "pure": true,
                                          "register": [Function],
                                          "registerField": [Function],
                                          "registerInnerOnSubmit": [Function],
                                          "registeredFields": undefined,
                                          "reset": [Function],
                                          "sectionPrefix": undefined,
                                          "setSubmitFailed": [Function],
                                          "setSubmitSucceeded": [Function],
                                          "shouldAsyncValidate": [Function],
                                          "shouldError": [Function],
                                          "shouldValidate": [Function],
                                          "shouldWarn": [Function],
                                          "startAsyncValidation": [Function],
                                          "startSubmit": [Function],
                                          "stopAsyncValidation": [Function],
                                          "stopSubmit": [Function],
                                          "submit": [Function],
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "syncErrors": Object {},
                                          "syncWarnings": Object {},
                                          "touch": [Function],
                                          "touchOnBlur": true,
                                          "touchOnChange": false,
                                          "triggerSubmit": undefined,
                                          "unregister": [Function],
                                          "unregisterField": [Function],
                                          "untouch": [Function],
                                          "updateSyncErrors": [Function],
                                          "updateSyncWarnings": [Function],
                                          "valid": true,
                                          "validExceptSubmit": true,
                                          "validate": [Function],
                                          "values": Object {},
                                          "warning": undefined,
                                        }
                                      }
                                      _value={undefined}
                                      asyncError={undefined}
                                      asyncValidating={false}
                                      component={[Function]}
                                      dirty={false}
                                      dispatch={[Function]}
                                      initial={undefined}
                                      name="ukResident"
                                      normalize={[Function]}
                                      pristine={true}
                                      state={undefined}
                                      submitError={undefined}
                                      submitFailed={undefined}
                                      submitting={undefined}
                                      syncError={undefined}
                                      syncWarning={undefined}
                                      value={undefined}
                                    >
                                      <component
                                        input={
                                          Object {
                                            "name": "ukResident",
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onDragStart": [Function],
                                            "onDrop": [Function],
                                            "onFocus": [Function],
                                            "value": "",
                                          }
                                        }
                                        meta={
                                          Object {
                                            "active": false,
                                            "asyncValidating": false,
                                            "autofilled": false,
                                            "dirty": false,
                                            "dispatch": [Function],
                                            "error": undefined,
                                            "form": "cards",
                                            "initial": undefined,
                                            "invalid": false,
                                            "pristine": true,
                                            "submitFailed": false,
                                            "submitting": false,
                                            "touched": false,
                                            "valid": true,
                                            "visited": false,
                                            "warning": undefined,
                                          }
                                        }
                                      >
                                        <button
                                          className="pt-button pt-large"
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "alignItems": "center",
                                              "backgroundColor": "white",
                                              "borderRadius": "16px",
                                              "display": "flex",
                                              "justifyContent": "space-around",
                                              "margin": "8px",
                                              "width": "35%",
                                            }
                                          }
                                          type="button"
                                        >
                                          <FormattedMessage
                                            id="page3.button.no"
                                            values={Object {}}
                                          >
                                            <span>
                                              No
                                            </span>
                                          </FormattedMessage>
                                          <Blueprint.Icon
                                            iconName="delete"
                                            style={
                                              Object {
                                                "color": "#DB3B55",
                                              }
                                            }
                                          >
                                            <span
                                              className="pt-icon-standard pt-icon-delete"
                                              style={
                                                Object {
                                                  "color": "#DB3B55",
                                                }
                                              }
                                            />
                                          </Blueprint.Icon>
                                        </button>
                                      </component>
                                    </ConnectedField>
                                  </Connect(ConnectedField)>
                                </Field>
                                <Field
                                  component={[Function]}
                                  name="ukResident"
                                >
                                  <Connect(ConnectedField)
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": false,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": true,
                                        "form": "cards",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onPrevious": [Function],
                                        "onSubmit": [Function],
                                        "pageIndex": 3,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "validate": [Function],
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    component={[Function]}
                                    name="ukResident"
                                    normalize={[Function]}
                                  >
                                    <ConnectedField
                                      _reduxForm={
                                        Object {
                                          "anyTouched": false,
                                          "array": Object {
                                            "insert": [Function],
                                            "move": [Function],
                                            "pop": [Function],
                                            "push": [Function],
                                            "remove": [Function],
                                            "removeAll": [Function],
                                            "shift": [Function],
                                            "splice": [Function],
                                            "swap": [Function],
                                            "unshift": [Function],
                                          },
                                          "arrayInsert": [Function],
                                          "arrayMove": [Function],
                                          "arrayPop": [Function],
                                          "arrayPush": [Function],
                                          "arrayRemove": [Function],
                                          "arrayRemoveAll": [Function],
                                          "arrayShift": [Function],
                                          "arraySplice": [Function],
                                          "arraySwap": [Function],
                                          "arrayUnshift": [Function],
                                          "asyncErrors": undefined,
                                          "asyncValidate": [Function],
                                          "asyncValidating": false,
                                          "autofill": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "clearAsyncError": [Function],
                                          "clearSubmit": [Function],
                                          "clearSubmitErrors": [Function],
                                          "destroy": [Function],
                                          "destroyOnUnmount": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "enableReinitialize": false,
                                          "error": undefined,
                                          "focus": [Function],
                                          "forceUnregisterOnUnmount": true,
                                          "form": "cards",
                                          "getFormState": [Function],
                                          "getValues": [Function],
                                          "initialValues": undefined,
                                          "initialize": [Function],
                                          "initialized": false,
                                          "invalid": false,
                                          "keepDirtyOnReinitialize": false,
                                          "onPrevious": [Function],
                                          "onSubmit": [Function],
                                          "pageIndex": 3,
                                          "persistentSubmitErrors": false,
                                          "pristine": true,
                                          "pure": true,
                                          "register": [Function],
                                          "registerField": [Function],
                                          "registerInnerOnSubmit": [Function],
                                          "registeredFields": undefined,
                                          "reset": [Function],
                                          "sectionPrefix": undefined,
                                          "setSubmitFailed": [Function],
                                          "setSubmitSucceeded": [Function],
                                          "shouldAsyncValidate": [Function],
                                          "shouldError": [Function],
                                          "shouldValidate": [Function],
                                          "shouldWarn": [Function],
                                          "startAsyncValidation": [Function],
                                          "startSubmit": [Function],
                                          "stopAsyncValidation": [Function],
                                          "stopSubmit": [Function],
                                          "submit": [Function],
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "syncErrors": Object {},
                                          "syncWarnings": Object {},
                                          "touch": [Function],
                                          "touchOnBlur": true,
                                          "touchOnChange": false,
                                          "triggerSubmit": undefined,
                                          "unregister": [Function],
                                          "unregisterField": [Function],
                                          "untouch": [Function],
                                          "updateSyncErrors": [Function],
                                          "updateSyncWarnings": [Function],
                                          "valid": true,
                                          "validExceptSubmit": true,
                                          "validate": [Function],
                                          "values": Object {},
                                          "warning": undefined,
                                        }
                                      }
                                      _value={undefined}
                                      asyncError={undefined}
                                      asyncValidating={false}
                                      component={[Function]}
                                      dirty={false}
                                      dispatch={[Function]}
                                      initial={undefined}
                                      name="ukResident"
                                      normalize={[Function]}
                                      pristine={true}
                                      state={undefined}
                                      submitError={undefined}
                                      submitFailed={undefined}
                                      submitting={undefined}
                                      syncError={undefined}
                                      syncWarning={undefined}
                                      value={undefined}
                                    >
                                      <component
                                        input={
                                          Object {
                                            "name": "ukResident",
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onDragStart": [Function],
                                            "onDrop": [Function],
                                            "onFocus": [Function],
                                            "value": "",
                                          }
                                        }
                                        meta={
                                          Object {
                                            "active": false,
                                            "asyncValidating": false,
                                            "autofilled": false,
                                            "dirty": false,
                                            "dispatch": [Function],
                                            "error": undefined,
                                            "form": "cards",
                                            "initial": undefined,
                                            "invalid": false,
                                            "pristine": true,
                                            "submitFailed": false,
                                            "submitting": false,
                                            "touched": false,
                                            "valid": true,
                                            "visited": false,
                                            "warning": undefined,
                                          }
                                        }
                                      >
                                        <button
                                          className="pt-button pt-large"
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "alignItems": "center",
                                              "backgroundColor": "white",
                                              "borderRadius": "16px",
                                              "display": "flex",
                                              "justifyContent": "space-around",
                                              "margin": "8px",
                                              "width": "35%",
                                            }
                                          }
                                          type="button"
                                        >
                                          <FormattedMessage
                                            id="page3.button.yes"
                                            values={Object {}}
                                          >
                                            <span>
                                              Yes
                                            </span>
                                          </FormattedMessage>
                                          <Blueprint.Icon
                                            iconName="endorsed"
                                            style={
                                              Object {
                                                "color": "#22DD4E",
                                              }
                                            }
                                          >
                                            <span
                                              className="pt-icon-standard pt-icon-endorsed"
                                              style={
                                                Object {
                                                  "color": "#22DD4E",
                                                }
                                              }
                                            />
                                          </Blueprint.Icon>
                                        </button>
                                      </component>
                                    </ConnectedField>
                                  </Connect(ConnectedField)>
                                </Field>
                              </div>
                            </div>
                            <div
                              className="pt-callout"
                              style={
                                Object {
                                  "alignItems": "center",
                                  "backgroundColor": "white",
                                  "borderTop": "1px solid #DCDCDC",
                                  "display": "flex",
                                  "height": "10%",
                                  "justifyContent": "center",
                                }
                              }
                            >
                              <Blueprint.Tooltip
                                className="pt-tooltip-indicator"
                                content={
                                  <em>
                                    page3.tooltip
                                  </em>
                                }
                                hoverCloseDelay={0}
                                hoverOpenDelay={100}
                                isDisabled={false}
                                openOnTargetFocus={true}
                                position={1}
                                rootElementTag="span"
                                transitionDuration={100}
                                useSmartArrowPositioning={true}
                                useSmartPositioning={false}
                              >
                                <Blueprint.Popover
                                  arrowSize={22}
                                  autoFocus={false}
                                  canEscapeKeyClose={false}
                                  className="pt-tooltip-indicator"
                                  content={
                                    <em>
                                      page3.tooltip
                                    </em>
                                  }
                                  defaultIsOpen={false}
                                  enforceFocus={false}
                                  hoverCloseDelay={0}
                                  hoverOpenDelay={100}
                                  inheritDarkTheme={true}
                                  inline={false}
                                  interactionKind={3}
                                  isDisabled={false}
                                  isModal={false}
                                  lazy={true}
                                  openOnTargetFocus={true}
                                  popoverClassName="pt-tooltip"
                                  position={1}
                                  rootElementTag="span"
                                  transitionDuration={100}
                                  useSmartArrowPositioning={true}
                                  useSmartPositioning={false}
                                >
                                  <span
                                    className="pt-popover-target pt-tooltip-indicator"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                  >
                                    <span
                                      key=".0"
                                      style={
                                        Object {
                                          "color": "#AFB0B2",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <FormattedMessage
                                        id="card.footer"
                                        values={Object {}}
                                      >
                                        <span>
                                          Why do you need this info?
                                        </span>
                                      </FormattedMessage>
                                    </span>
                                    <Blueprint.Overlay
                                      autoFocus={false}
                                      backdropClassName="pt-popover-backdrop"
                                      backdropProps={Object {}}
                                      canEscapeKeyClose={false}
                                      canOutsideClickClose={false}
                                      className={undefined}
                                      didOpen={[Function]}
                                      enforceFocus={false}
                                      hasBackdrop={false}
                                      inline={false}
                                      isOpen={false}
                                      lazy={true}
                                      onClose={[Function]}
                                      transitionDuration={100}
                                      transitionName="pt-popover"
                                    />
                                  </span>
                                </Blueprint.Popover>
                              </Blueprint.Tooltip>
                            </div>
                          </div>
                        </div>
                      </Card>
                      <div
                        className="half-circle-rotated"
                        onClick={[Function]}
                        style={
                          Object {
                            "alignItems": "center",
                            "cursor": "pointer",
                            "display": "flex",
                            "justifyContent": "center",
                          }
                        }
                      >
                        <Blueprint.Icon
                          iconName="chevron-left"
                          style={
                            Object {
                              "color": "white",
                              "fontSize": "3em",
                              "transform": "translate(-10px)",
                            }
                          }
                        >
                          <span
                            className="pt-icon-standard pt-icon-chevron-left"
                            style={
                              Object {
                                "color": "white",
                                "fontSize": "3em",
                                "transform": "translate(-10px)",
                              }
                            }
                          />
                        </Blueprint.Icon>
                      </div>
                    </div>
                  </div>
                </Page>
              </ThirdPage>
            </ThirdPage>
          </Form(ThirdPage)>
        </Connect(Form(ThirdPage))>
      </ReduxForm>
    </Connect(ReduxForm)>
  </IntlProvider>
</Provider>
`;

exports[`ThirdPage renders without crashing 1`] = `<ThirdPage />`;
